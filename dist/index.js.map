{"version":3,"file":"index.js","sources":["../src/emitter.ts","../src/constants/index.ts","../src/utils/worker.ts","../src/utils/index.ts","../src/weim.ts"],"sourcesContent":["import { IMEvents } from './constants';\nimport {WebsocketResponse} from './types'\ninterface Events {\n    [key:string]:CallbackFunction[]\n}\ntype CallbackFunction = (data:WebsocketResponse)=>void\nclass Emitter {\n\n    private events:Events;\n    constructor(){\n        this.events = {};\n    }\n    emit(event:IMEvents,data:WebsocketResponse){\n        if(this.events[event]){\n            this.events[event].forEach((fn)=>fn(data));\n        }\n    }\n    on(event:IMEvents,fn:CallbackFunction){\n        if(this.events[event]){\n            this.events[event].push(fn)\n        }else{\n            this.events[event] = [fn];\n        }\n        return this;\n    }\n    off(event:IMEvents,fn:CallbackFunction){\n        if(event && typeof fn === 'function'){\n            const listeners = this.events[event];\n            const index = listeners.findIndex((_fn)=>_fn===fn);\n            listeners.splice(index,1);\n        }else{\n            this.events[event] = [];\n        }\n    }\n}\nexport{\n    Emitter\n}","enum IMCommand {\n    LOGIN=\"Login\",\n    LOGOUT=\"Logout\",\n    GETLOGINSTATUS=\"GetLoginStatus\"\n}\n\nenum IMEvents{\n\n}\nexport {\n    IMCommand,\n    IMEvents\n}","function create(fun: any) {\n    const blob = new Blob([\"(\" + fun + \")()\"]);\n    const url = window.URL.createObjectURL(blob);\n    const worker = new Worker(url);\n    return worker;\n  }\n  \n  export const createWorker = (callback: () => void, time: number) => {\n    const pollingWorker = create(`function (e) {\n        setInterval(function () {\n          this.postMessage(null)\n        }, ${time})\n      }`);\n    pollingWorker.onmessage = callback;\n    return pollingWorker;\n  };\n  \n  export const stopWorker = (instance: Worker) => {\n    try {\n      instance && instance.terminate();\n    } catch (err) {\n      console.log(err);\n    }\n  };","const uuid = ():string => {\n    return (Math.random()*36).toString(36).slice(2)+new Date().getTime().toString();\n}\nexport * from './worker'\nexport {\n    uuid\n}","import {  Emitter } from \"./emitter\";\nimport { WebsocketResponse, Msg, userInfo, InitConfig } from \"./types\";\nimport {IMCommand, IMEvents} from \"./constants\"\nimport { createWorker, stopWorker, uuid } from \"./utils\";\n\nexport default class WEIMSDK extends Emitter{\n\n    private ws:WebSocket | undefined;\n    private wsUrl: string = \"\";\n    private lastTime: number = 0;\n    private heartbeatCount: number = 0;\n    private heartbeatStartTime: number = 0;\n    private logoutFlag: boolean = false;\n    private lock: boolean = false;\n    private domain:string= \"\";\n    private mid:Number= 0;\n    private platform:string= \"wx\";\n    private onceFlag:boolean = true;\n    private timer:NodeJS.Timer | undefined = undefined;\n    private worker:Worker | null = null;\n    private userInfo:userInfo;\n    constructor(cfg:InitConfig){\n        super();\n        this.wsUrl = cfg.wsUrl;\n        this.domain = cfg.domain;\n        this.mid = cfg.mid;\n        this.platform = cfg.platform;\n        this.userInfo = cfg.userInfo;\n    }\n    connect(){\n        return new Promise<WebsocketResponse>((resolve,reject) =>{\n            const onOpen = () =>{\n                this.iLogin(this.userInfo).then((res)=>{\n                    this.logoutFlag = false;\n                    this.heartbeat();\n                    resolve(res);\n                })\n                .catch((err) =>{\n                    reject(err)\n                })\n            }\n            const onClose = () => {\n                if(!this.logoutFlag){\n                    // Object.values()\n                }\n                reject({errCode:111,errMsg:'ws connect close ...'})\n            }\n            \n            const onError = (err:Error | Event) => {\n                reject({errCode:112,errMsg:'ws connect error...'})\n            }\n            if(this.platform === 'web'){\n                this.ws = new WebSocket(this.wsUrl);\n                this.ws.onclose = onClose;\n                this.ws.onopen = onOpen;\n                this.ws.onerror = onError;\n                return;\n            }\n            //@ts-ignore\n            const platformNamespace = this.platform === \"uni\" ? uni : wx;\n            this.ws = platformNamespace.connectSocket({\n                url: this.wsUrl,\n                complete: () => {},\n              });\n              //@ts-ignore\n              this.ws.onClose(onClose);\n              //@ts-ignore\n              this.ws.onOpen(onOpen);\n              //@ts-ignore\n              this.ws.onError(onError);\n        \n            if(!this.ws){\n                reject({errCode:112,errMsg:'The current platform is not supported'})\n            }\n        });\n    }\n    private heartbeat(){\n        console.log('start heartbeat ...')\n        this.clearTimer();\n        const callback = () =>{\n            if(this.logoutFlag){\n                if(this.worker){\n                    stopWorker(this.worker);\n                }\n            }\n        }\n        if(this.ws?.readyState !== this.ws?.CONNECTING && this.ws?.readyState!==this.ws?.OPEN){\n            this.reconnect();\n            return;\n        }\n        const now = new Date().getTime();\n        if(now - this.lastTime < 9000){\n            return;\n        }\n        this.getLoginStatus().catch((err)=>this.reconnect());\n        if(this.worker){\n            stopWorker(this.worker);\n        }\n        try{\n            this.worker = createWorker(callback,10000);\n        }catch(error){\n\n        }\n    }\n    private clearTimer(){\n        if(this.timer){\n            clearTimeout(this.timer);\n        }\n    }\n    private createMsg(cmd:IMCommand,data:any,fromId:Number,toId:Number){\n        return {\n            cmd:cmd,\n            domain:this.domain,\n            mid:this.mid,\n            fromId:fromId,\n            toId:toId,\n            data:data\n        }\n    }\n\n    logout(uid:Number){\n        return new Promise<WebsocketResponse>((resolve,reject) => {\n            const _uuid = uuid()\n            const msg = this.createMsg(IMCommand.LOGOUT,\"\",uid,0);\n            this.wsSend(msg,resolve,reject);\n        })\n    }\n    getLoginStatus = () => {\n        return new Promise<WebsocketResponse>((resolve, reject) => {\n        const _uuid =uuid();\n        const msg = this.createMsg(\n            IMCommand.GETLOGINSTATUS,\n            this.userInfo,\n            this.userInfo.id,\n            0\n        );\n        this.wsSend(msg, resolve, reject);\n        });\n    };\n    private iLogin(data:userInfo){\n        return new Promise<WebsocketResponse>((resolve,reject)=>{\n            this.ws?.close();\n            this.ws = undefined;\n            this.wsSend(\n                this.createMsg(IMCommand.LOGIN,data,data.id,0),\n                resolve,reject)\n        })\n    }\n\n    private reconnect(){\n        if(!this.onceFlag) this.onceFlag = true;\n        if(this.lock) return;\n        this.lock = true;\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.connect();\n            this.lock = false;\n        },500)\n    }\n    private wsSend = (\n        msg:Msg,\n        resolve:(value:WebsocketResponse | PromiseLike<WebsocketResponse>)=>void,\n        reject:(err?:any)=>void\n        )=>{\n            if(this.ws?.readyState !== this.ws?.OPEN){\n                reject({errCode:112,errMsg:'ws conecting'})\n                return;\n            }\n            if(typeof msg.data === \"object\"){\n                msg.data = JSON.stringify(msg.data)\n            }\n            const handleMessage = (ev:MessageEvent<string>)=>{\n                this.lastTime = new Date().getTime();\n                const data = JSON.parse(ev.data)\n                if( (IMEvents as Record<string,string>)[data.event.toUpperCase()] ){\n                    this.emit(data.event,data);\n                    return;\n                }\n\n                if(msg.cmd === IMCommand.LOGOUT){\n                    //退出指令\n                    this.ws!.close();\n                    this.ws = undefined;\n                    this.onceFlag = true;\n                }\n                // const callbackJob = this.ws2promise()\n            }\n            try{\n                if(this.platform=='web'){\n                    this.ws!.send(JSON.stringify(msg))\n                    this.ws!.onmessage = handleMessage;\n                }else{\n                    this.ws!.send({\n                        //@ts-ignore\n                        data:JSON.stringify(msg),\n                        success:(res:any) =>{\n                            if(\n                                this.platform==='uni' &&\n                                //@ts-ignore\n                                this.ws!._callbacks !== undefined &&\n                                //@ts-ignore\n                                this.ws!._callbacks.message !== undefined\n                            ){\n                                //@ts-ignore\n                                this.ws!._callbacks.message = [];\n                            }\n                        }\n                    });\n\n                    if(this.onceFlag){\n                        //@ts-ignore\n                        this.ws!.onMessage(handleMessage);\n                        this.onceFlag=false;\n                    }\n\n                }\n            } catch(error){\n                reject({errCode:112,errMsg:\"no ws connect...\"})\n                return;\n            }\n            if (msg.cmd === IMCommand.LOGOUT) {\n                this.onceFlag = true;\n            }\n        }\n}"],"names":["Emitter","IMCommand","events","this","emit","event","data","forEach","fn","on","push","off","index","listeners","findIndex","_fn","splice","IMEvents","stopWorker","instance","terminate","err","console","log","uuid","Math","random","toString","slice","Date","getTime","_Emitter","WEIMSDK","cfg","_this","call","ws","wsUrl","lastTime","heartbeatCount","heartbeatStartTime","logoutFlag","lock","domain","mid","platform","onceFlag","timer","undefined","worker","userInfo","getLoginStatus","Promise","resolve","reject","msg","createMsg","GETLOGINSTATUS","id","wsSend","_this$ws","_this$ws2","readyState","OPEN","JSON","stringify","handleMessage","ev","parse","toUpperCase","cmd","LOGOUT","close","send","onmessage","success","res","_callbacks","message","onMessage","error","errCode","errMsg","connect","_this2","onOpen","iLogin","then","heartbeat","onClose","onError","WebSocket","onclose","onopen","onerror","platformNamespace","uni","wx","connectSocket","url","complete","_this$ws3","_this$ws4","_this$ws5","_this$ws6","callback","blob","pollingWorker","_this3","clearTimer","CONNECTING","reconnect","Blob","window","URL","createObjectURL","Worker","clearTimeout","fromId","toId","logout","uid","_this4","_this5","_this5$ws","LOGIN","_this6","setTimeout"],"mappings":"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"}